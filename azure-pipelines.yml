# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

variables:
  artifactsFolder: './_artifacts'
  lidarrVersion: '0.6.2.$(Build.BuildId)'
  windowsInstaller: 'Lidarr.$(Build.SourceBranchName).$(lidarrVersion).windows-installer.exe'
  windowsZip: 'Lidarr.$(Build.SourceBranchName).$(lidarrVersion).windows.zip'
  macOsApp: 'Lidarr.$(Build.SourceBranchName).$(lidarrVersion).osx-app.zip'
  macOsTar: 'Lidarr.$(Build.SourceBranchName).$(lidarrVersion).osx.tar.gz'
  linuxTar: 'Lidarr.$(Build.SourceBranchName).$(lidarrVersion).linux.tar.gz'

jobs:
- job: Windows
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - checkout: self
    submodules: true
  - task: Bash@3
    displayName: Build Lidarr
    inputs:
      targetType: 'filePath'
      filePath: ./build.sh
  - task: Bash@3
    displayName: Windows Unit Tests
    inputs:
      targetType: 'filePath'
      filePath: ./test.sh
      arguments: Windows Unit
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'NUnit'
      testResultsFiles: '**/TestResult.xml'
      testRunTitle: 'Windows Unit Tests'
      mergeTestResults: true
  - task: ArchiveFiles@2
    displayName: Create Windows zip
    inputs:
      archiveFile: '$(Build.ArtifactStagingDirectory)/$(windowsZip)'
      archiveType: 'zip'
      includeRootFolder: false
      rootFolderOrFile: $(artifactsFolder)/windows
  - task: ArchiveFiles@2
    displayName: Create MacOS app
    inputs:
      archiveFile: '$(Build.ArtifactStagingDirectory)/$(macOsApp)'
      archiveType: 'zip'
      includeRootFolder: false
      rootFolderOrFile: $(artifactsFolder)/macos-app
  - task: ArchiveFiles@2
    displayName: Create MacOS tar
    inputs:
      archiveFile: '$(Build.ArtifactStagingDirectory)/$(macOsTar)'
      archiveType: 'tar'
      tarCompression: 'gz'
      includeRootFolder: false
      rootFolderOrFile: $(artifactsFolder)/macos
  - task: ArchiveFiles@2
    displayName: Create Linux tar
    inputs:
      archiveFile: '$(Build.ArtifactStagingDirectory)/$(linuxTar)'
      archiveType: 'tar'
      tarCompression: 'gz'
      includeRootFolder: false
      rootFolderOrFile: $(artifactsFolder)/linux
  - bash: |
      export APPVEYOR_BUILD_NUMBER=${BUILD_BUILDID}
      export APPVEYOR_BUILD_VERSION=${LIDARRVERSION}
      export APPVEYOR_REPO_BRANCH=${BUILD_SOURCEBRANCHNAME}
      ./setup/inno/ISCC.exe "./setup/lidarr.iss"
      cp ./setup/output/Lidarr.*windows.exe ${ARTIFACTSFOLDER}/${WINDOWSINSTALLER}
    displayName: Create Windows installer
  - task: PublishBuildArtifacts@1
    displayName: Publish Artifacts
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'Lidarr'
      publishLocation: 'Container'
- job: macOS
  pool:
    vmImage: 'macOS-10.13'
  steps:
  - checkout: self
    submodules: true
  - task: Bash@3
    displayName: Build Lidarr
    inputs:
      targetType: 'filePath'
      filePath: ./build.sh
  - task: Bash@3
    displayName: Mac Unit Tests
    inputs:
      targetType: 'filePath'
      filePath: ./test.sh
      arguments: Mac Unit
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'NUnit'
      testResultsFiles: '**/TestResult.xml'
      testRunTitle: 'Mac Unit Tests'
      mergeTestResults: true
- job: Linux
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  # install chromaprint from github since the 16.04 version is ancient
  - script: |
      wget https://github.com/acoustid/chromaprint/releases/download/v1.4.3/chromaprint-fpcalc-1.4.3-linux-x86_64.tar.gz
      sudo tar xf chromaprint-fpcalc-1.4.3-linux-x86_64.tar.gz --strip-components=1 --directory /usr/bin
    displayName: Install fpcalc
  - checkout: self
    submodules: true
  - task: Bash@3
    displayName: Build Lidarr
    inputs:
      targetType: 'filePath'
      filePath: ./build.sh
  - task: Bash@3
    displayName: Linux Unit Tests
    inputs:
      targetType: 'filePath'
      filePath: ./test.sh
      arguments: Linux Unit
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'NUnit'
      testResultsFiles: '**/TestResult.xml'
      testRunTitle: 'Linux Unit Tests'
      mergeTestResults: true
