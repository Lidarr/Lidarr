# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

variables:
  artifactsFolder: './_artifacts'
  testsFolder: './_tests'
  minorVersion: $[counter(variables['build.reason'], 1000)]
  lidarrVersion: '0.6.2.$(minorVersion)'
  windowsInstaller: 'Lidarr.$(Build.SourceBranchName).$(lidarrVersion).windows-installer.exe'
  windowsZip: 'Lidarr.$(Build.SourceBranchName).$(lidarrVersion).windows.zip'
  macOsApp: 'Lidarr.$(Build.SourceBranchName).$(lidarrVersion).osx-app.zip'
  macOsTar: 'Lidarr.$(Build.SourceBranchName).$(lidarrVersion).osx.tar.gz'
  linuxTar: 'Lidarr.$(Build.SourceBranchName).$(lidarrVersion).linux.tar.gz'
  sentryOrg: 'lidarr'

jobs:
- job: Windows Build
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - task: NodeTool@0
    inputs:
      versionSpec: '10.x'
  - checkout: self
    submodules: true
  - task: Assembly-Info-NetFramework@2
    displayName: Patch AssemblyInfo
    inputs:
      Path: '$(Build.SourcesDirectory)'
      FileNames: 'src\NzbDrone.Common\Properties\SharedAssemblyInfo.cs'
      InsertAttributes: false
      FileEncoding: 'auto'
      WriteBOM: false
      VersionNumber: '$(lidarrVersion)'
      FileVersionNumber: '$(lidarrVersion)'
      InformationalVersion: '$(lidarrVersion)-rc1'
  - task: Bash@3
    displayName: Build Lidarr
    inputs:
      targetType: 'filePath'
      filePath: ./build.sh
  - publish: $(testsFolder)
    artifact: Tests
  - task: ArchiveFiles@2
    displayName: Create Windows zip
    inputs:
      archiveFile: '$(Build.ArtifactStagingDirectory)/$(windowsZip)'
      archiveType: 'zip'
      includeRootFolder: false
      rootFolderOrFile: $(artifactsFolder)/windows
  - task: ArchiveFiles@2
    displayName: Create MacOS app
    inputs:
      archiveFile: '$(Build.ArtifactStagingDirectory)/$(macOsApp)'
      archiveType: 'zip'
      includeRootFolder: false
      rootFolderOrFile: $(artifactsFolder)/macos-app
  - task: ArchiveFiles@2
    displayName: Create MacOS tar
    inputs:
      archiveFile: '$(Build.ArtifactStagingDirectory)/$(macOsTar)'
      archiveType: 'tar'
      tarCompression: 'gz'
      includeRootFolder: false
      rootFolderOrFile: $(artifactsFolder)/macos
  - task: ArchiveFiles@2
    displayName: Create Linux tar
    inputs:
      archiveFile: '$(Build.ArtifactStagingDirectory)/$(linuxTar)'
      archiveType: 'tar'
      tarCompression: 'gz'
      includeRootFolder: false
      rootFolderOrFile: $(artifactsFolder)/linux
  - bash: |
      export APPVEYOR_BUILD_NUMBER=${BUILD_BUILDID}
      export APPVEYOR_BUILD_VERSION=${LIDARRVERSION}
      export APPVEYOR_REPO_BRANCH=${BUILD_SOURCEBRANCHNAME}
      ./setup/inno/ISCC.exe "./setup/lidarr.iss"
      cp ./setup/output/Lidarr.*windows.exe ${BUILD_ARTIFACTSTAGINGDIRECTORY}/${WINDOWSINSTALLER}
    displayName: Create Windows installer
  - publish: $(Build.ArtifactStagingDirectory)
    artifact: 'Lidarr'
  - bash: |
      echo "Uploading source maps to sentry"
      yarn sentry-cli releases new --finalize -p lidarr -p lidarr-ui -p lidarr-update "${LIDARRVERSION}-debug"
      yarn sentry-cli releases -p lidarr-ui files "${LIDARRVERSION}-debug" upload-sourcemaps _output/UI/ --rewrite
      yarn sentry-cli releases set-commits --auto "${LIDARRVERSION}-debug"
      yarn sentry-cli releases deploys "${LIDARRVERSION}-debug" new -e nightly
    displayName: Publish Sentry Source Maps
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
    env:
      SENTRY_AUTH_TOKEN: $(sentryAuthToken)
- job: macOS Build
  pool:
    vmImage: 'macOS-10.13'
  steps:
  - task: NodeTool@0
    inputs:
      versionSpec: '10.x'
  - checkout: self
    submodules: true
  - task: Bash@3
    displayName: Build Lidarr
    inputs:
      targetType: 'filePath'
      filePath: ./build.sh
- job: Linux Build
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - task: NodeTool@0
    inputs:
      versionSpec: '10.x'
  - checkout: self
    submodules: true
  - task: Bash@3
    displayName: Build Lidarr
    inputs:
      targetType: 'filePath'
      filePath: ./build.sh
- job: Linux Unit Tests
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - script: |
      wget https://github.com/acoustid/chromaprint/releases/download/v1.4.3/chromaprint-fpcalc-1.4.3-linux-x86_64.tar.gz
      sudo tar xf chromaprint-fpcalc-1.4.3-linux-x86_64.tar.gz --strip-components=1 --directory /usr/bin
    displayName: Install fpcalc
  - checkout: self
  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: 'current'
      downloadType: 'single'
      artifactName: Tests
      downloadPath: $(testsFolder)
  - task: Bash@3
    displayName: Linux Unit Tests
    inputs:
      targetType: 'filePath'
      filePath: ./test.sh
      arguments: Linux Unit
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'NUnit'
      testResultsFiles: '**/TestResult.xml'
      testRunTitle: 'Linux Unit Tests'