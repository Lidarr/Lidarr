using FluentValidation;
using NzbDrone.Core.Annotations;
using NzbDrone.Core.ThingiProvider;
using NzbDrone.Core.Validation;
using System.Collections.Generic;

namespace NzbDrone.Core.Notifications.Gotify
{
    public class GotifySettingsValidator : AbstractValidator<GotifySettings>
    {
        public GotifySettingsValidator()
        {
            RuleFor(c => c.GotifyServer).NotEmpty();
            RuleFor(c => c.AppToken).NotEmpty();
            RuleFor(c => c.Retry).GreaterThanOrEqualTo(30).LessThanOrEqualTo(86400).When(c => (GotifyPriority)c.Priority == GotifyPriority.Emergency);
            RuleFor(c => c.Retry).GreaterThanOrEqualTo(0).LessThanOrEqualTo(86400).When(c => (GotifyPriority)c.Priority == GotifyPriority.Emergency);
        }
    }

    public class GotifySettings : IProviderConfig
    {
        private static readonly GotifySettingsValidator Validator = new GotifySettingsValidator();

        public GotifySettings()
        {
            Priority = 0;
        }

        [FieldDefinition(0, Label = "Gotify Server", HelpLink = "https://gotify.net/", HelpText = "Gotify server URL, including http(s):// and port if needed")]
        public string GotifyServer { get; set; }

        [FieldDefinition(1, Label = "APP Token", HelpLink = "https://gotify.net/", HelpText = "The APP Token generated by Gotify")]
        public string AppToken { get; set; }

        [FieldDefinition(3, Label = "Priority", Type = FieldType.Select, SelectOptions = typeof(GotifyPriority))]
        public int Priority { get; set; }

        [FieldDefinition(4, Label = "Retry", Type = FieldType.Textbox, HelpText = "Interval to retry Emergency alerts, minimum 30 seconds")]
        public int Retry { get; set; }

        [FieldDefinition(5, Label = "Expire", Type = FieldType.Textbox, HelpText = "Maximum time to retry Emergency alerts, maximum 86400 seconds")]
        public int Expire { get; set; }

        public bool IsValid => !string.IsNullOrWhiteSpace(GotifyServer) && !string.IsNullOrWhiteSpace(AppToken) && Priority >= -1 && Priority <= 2;

        public NzbDroneValidationResult Validate()
        {
            return new NzbDroneValidationResult(Validator.Validate(this));
        }
    }
}
